---
title: ""
format: html
editor: visual
---

# Imputation analysis for PFS endpoint of CONFIRM

```{r}
#Loading packages
library(FHtest)
library(survival)
library(survminer)
library(tidyverse)
library(Cairo)
library(interval)
library(icenReg)
```

Imputing exact event times from the analysis dataset

```{r}
#changing reference category to be placebo
interval_edit <- interval_edit |>
  dplyr::mutate(GROUP = factor(GROUP,levels=c("Placebo","Nivolumab"),labels=c("Placebo","Nivolumab")))

imputation_data <- interval_data_all |> 
  dplyr::mutate(censored = ifelse(is.na(R)==T,0,1), #censored indictor 0 means right censored
                midpoint = ifelse(censored ==0,L,R/2+L/2),
                leftpoint = ifelse(censored==0,L,L),
                rightpoint = ifelse(censored==0,L,R)) |>
  dplyr::mutate(GROUP = factor(GROUP,levels=c("Placebo","Nivolumab"),labels=c("Placebo","Nivolumab")))
```

## Kaplan-Meier analysis

Creating Kaplan-Meier estimators for left-, mid- and right-point imputation

```{r}
#Creating KM estimates
S.midpoint <- survfit(Surv(midpoint,censored,type="right") ~ GROUP, data = imputation_data)
S.leftpoint <- survfit(Surv(leftpoint,censored,type="right") ~ GROUP, data = imputation_data)
S.rightpoint <- survfit(Surv(rightpoint,censored,type="right") ~ GROUP, data = imputation_data)

#median and associated 95% of 3 techniques
imputation.fit <- list(LEFT=S.leftpoint,MID=S.midpoint,RIGHT=S.rightpoint)
survminer::surv_median(imputation.fit,combine=T)
```

### Seperate plots of KM curves for each imputation approach 

```{r}

#Midpoint KM plot
Cairo::Cairo(
  width=48,
  height=30,
  file="CONFIRM_midpoint_KM.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
KM.plot <- survminer::ggsurvplot(S.midpoint,data=imputation_data,
                      xlab = "Time since randomisation (days)",
                      ylab = "Progression-free survival probability",
                      legend.labs =c("Nivolumab", "Placebo"),
                      conf.int = T,
                      ggtheme = theme_bw(),
                      risk.table = T,
                      risk.table.y.text.col = T, 
                      risk.table.y.text = FALSE,
                      surv.median.line = "hv",
                      ncensor.plot = T) 
KM.plot$plot + 
  theme(axis.text=element_text(size=20),
        axis.title=element_text(size=24,face="bold"),
        legend.text=element_text(size=20),
        legend.title = element_text(size=24)) 
dev.off()

#Leftpoint KM plot
Cairo::Cairo(
  width=48,
  height=30,
  file="CONFIRM_leftpoint_KM.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
KM.plot <- survminer::ggsurvplot(S.leftpoint,data=imputation_data,
                      xlab = "Time since randomisation (days)",
                      ylab = "Progression-free survival probability",
                      legend.labs =c("Nivolumab", "Placebo"),
                      conf.int = T,
                      ggtheme = theme_bw(),
                      risk.table = T,
                      risk.table.y.text.col = T, 
                      risk.table.y.text = FALSE,
                      surv.median.line = "hv",
                      ncensor.plot = T) 
KM.plot$plot + 
  theme(axis.text=element_text(size=20),
        axis.title=element_text(size=24,face="bold"),
        legend.text=element_text(size=20),
        legend.title = element_text(size=24)) 
dev.off()

#Rightpoint KM plot
Cairo::Cairo(
  width=48,
  height=30,
  file="CONFIRM_rightpoint_KM.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
KM.plot <- survminer::ggsurvplot(S.rightpoint,data=imputation_data,
                      xlab = "Time since randomisation (days)",
                      ylab = "Progression-free survival probability",
                      legend.labs =c("Nivolumab", "Placebo"),
                      conf.int = T,
                      ggtheme = theme_bw(),
                      risk.table = T,
                      risk.table.y.text.col = T, 
                      risk.table.y.text = FALSE,
                      surv.median.line = "hv",
                      ncensor.plot = T) 
KM.plot$plot + 
  theme(axis.text=element_text(size=20),
        axis.title=element_text(size=24,face="bold"),
        legend.text=element_text(size=20),
        legend.title = element_text(size=24)) 
dev.off()
```

### Plot of all 3 imputation approaches KM curves in one figure

```{r}
Cairo::Cairo(
  width=48,
  height=30,
  file="CONFIRM_all_imputations.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(S.midpoint, col=c("blue","red"), xlim=c(0, 800),ylim=c(0,1),
     xlab ="Time since randomisation (days)",
     ylab ="Progression-free survival probability")
par(new=T)
plot(S.leftpoint, col=c("dodgerblue","orange"),lty=c(2,2),xlim=c(0, 800),ylim=c(0,1))
par(new=T)
plot(S.rightpoint, col=c("darkblue","orangered"),lty=c(9,9), xlim=c(0, 800),ylim=c(0,1))
legend("topright",lty = c(1,1,2,2,9,9),
       col = c("blue","red","dodgerblue","orange","darkblue","orangered"),
       legend=c("Nivolumab midpoint","Placebo midpoint","Nivolumab leftpoint","Placebo leftpoint","Nivolumab rightpoint", "Placebo rightpoint"))
dev.off()
```

## Log-rank tests

### Classic log-rank test

```{r}
#midpoint
log.rank.test.m <-  survdiff(Surv(midpoint,censored)~GROUP,data = imputation_data) 
1-pchisq(log.rank.test.m$chisq,df=1)

#leftpoint
log.rank.test.l <-  survdiff(Surv(leftpoint,censored)~GROUP,data = imputation_data) 
1-pchisq(log.rank.test.l$chisq,df=1)

#rightpoint
log.rank.test.r <-  survdiff(Surv(rightpoint,censored)~GROUP,data = imputation_data) 
1-pchisq(log.rank.test.r$chisq,df=1)
```

### Fleming-Harrington tests

#### Mid-point imputation

```{r}
#early 
confirm.test.early.imp <- FHtest::FHtestrcp(Surv(midpoint,censored,type="right")~GROUP,
                  rho=1,lambda=0,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))
#middle
confirm.test.mid.imp <- FHtest::FHtestrcp(Surv(midpoint,censored,type="right")~GROUP,
                  rho=1,lambda=1,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))
#late
confirm.test.late.imp <- FHtest::FHtestrcp(Surv(midpoint,censored,type="right")~GROUP,
                  rho=0,lambda=1,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))

confirm.test.early.imp
confirm.test.mid.imp
confirm.test.late.imp

```

#### Right-point imputation

```{r}
#early 
confirm.test.early.imp.right <- FHtest::FHtestrcp(Surv(rightpoint,censored,type="right")~GROUP,
                  rho=1,lambda=0,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))
#middle
confirm.test.mid.imp.right <- FHtest::FHtestrcp(Surv(rightpoint,censored,type="right")~GROUP,
                  rho=1,lambda=1,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))
#late
confirm.test.late.imp.right <- FHtest::FHtestrcp(Surv(rightpoint,censored,type="right")~GROUP,
                  rho=0,lambda=1,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))

confirm.test.early.imp.right
confirm.test.mid.imp.right
confirm.test.late.imp.right
```

#### Leftpoint

```{r}
#early 
confirm.test.early.imp.left <- FHtest::FHtestrcp(Surv(leftpoint,censored,type="right")~GROUP,
                  rho=1,lambda=0,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))
#middle
confirm.test.mid.imp.left <- FHtest::FHtestrcp(Surv(leftpoint,censored,type="right")~GROUP,
                  rho=1,lambda=1,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))
#late
confirm.test.late.imp.left <- FHtest::FHtestrcp(Surv(leftpoint,censored,type="right")~GROUP,
                  rho=0,lambda=1,data=imputation_data,
                  icontrol=icfitControl(maxit=100000))

confirm.test.early.imp.left
confirm.test.mid.imp.left
confirm.test.late.imp.left
```

## Proportional Hazards model

### Unadjusted model

```{r}
#fitting unadjusted model

#mid-point
CONFIRM.mid.cox <- survival::coxph(survival::Surv(midpoint,censored,type="right")~GROUP,data=imputation_data)
summary(CONFIRM.mid.cox)

#left-point
CONFIRM.left.cox <- survival::coxph(survival::Surv(leftpoint,censored,type="right")~GROUP,data=imputation_data)
summary(CONFIRM.left.cox)

#right-point
CONFIRM.right.cox <- survival::coxph(survival::Surv(rightpoint,censored,type="right")~GROUP,data=imputation_data)
summary(CONFIRM.right.cox)

#95% CI for exponentaited coefficents for the three imputation approaches
exp(confint(CONFIRM.mid.cox))
exp(confint(CONFIRM.left.cox))
exp(confint(CONFIRM.right.cox))

```

### Adjusted PH models

```{r}
#mid
CONFIRM.mid.cox.epi <- survival::coxph(survival::Surv(midpoint,censored,type="right")~GROUP+decelltype_std,data=imputation_data)
summary(CONFIRM.mid.cox.epi)

#left
CONFIRM.left.cox.epi <- survival::coxph(survival::Surv(leftpoint,censored,type="right")~GROUP+decelltype_std,data=imputation_data)
summary(CONFIRM.left.cox.epi)

#right
CONFIRM.right.cox.epi <- survival::coxph(survival::Surv(rightpoint,censored,type="right")~GROUP+decelltype_std,data=imputation_data)
summary(CONFIRM.right.cox.epi)
```

### Plots for PH models

```{r}
#Midpoint plot

#creating dataset for cox plot
trt_df <-  data.frame(GROUP = c("Nivolumab", "Placebo"))
fit.mid <- survival::survfit(CONFIRM.mid.cox, newdata = trt_df)

Cairo::Cairo(
  width=48,
  height=30,
  file="CONFIRM_mid_cox.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
Cox.plot <- survminer::ggsurvplot(fit=fit.mid, conf.int = TRUE, 
                      xlab="Time since randomisation (days)",
                      ylab = "Progression-free survival probability",
                      legend.labs=c("Nivolumab", "Placebo"),
                      data=imputation_data,
           ggtheme = theme_minimal()) 
Cox.plot$plot + 
  theme(axis.text=element_text(size=20),
        axis.title=element_text(size=24,face="bold"),
        legend.text=element_text(size=20),
        legend.title = element_text(size=24)) 
dev.off()


#rightpoint plot
fit.right <- survival::survfit(CONFIRM.right.cox, newdata = trt_df)



Cairo::Cairo(
  width=48,
  height=30,
  file="CONFIRM_right_cox.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
Cox.plot <- survminer::ggsurvplot(fit=fit.right, conf.int = TRUE, 
                      xlab="Time since randomisation (days)",
                      ylab = "Progression-free survival probability",
                      legend.labs=c("Nivolumab", "Placebo"),
                      data=imputation_data,
           ggtheme = theme_minimal()) 
Cox.plot$plot + 
  theme(axis.text=element_text(size=20),
        axis.title=element_text(size=24,face="bold"),
        legend.text=element_text(size=20),
        legend.title = element_text(size=24)) 
dev.off()

#leftpoint plot
fit.left <- survival::survfit(CONFIRM.left.cox, newdata = trt_df)

Cairo::Cairo(
  width=48,
  height=30,
  file="CONFIRM_left_cox.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
Cox.plot <- survminer::ggsurvplot(fit=fit.left, conf.int = TRUE, 
                      xlab="Time since randomisation (days)",
                      ylab = "Progression-free survival probability",
                      legend.labs=c("Nivolumab", "Placebo"),
                      data=imputation_data,
           ggtheme = theme_minimal()) 
Cox.plot$plot + 
  theme(axis.text=element_text(size=20),
        axis.title=element_text(size=24,face="bold"),
        legend.text=element_text(size=20),
        legend.title = element_text(size=24)) 
dev.off()
```

## AFT models

### Unadjusted model

```{r}
AFT.fit.func <- function(dataset){
  aft.imputation <- list()

aft.imputation [["weibull"]] <- survival::survreg(survival::Surv(imputed_value,censored)~GROUP,
                  data=dataset,dist="weibull")

aft.imputation [["lognormal"]]  <- survival::survreg(survival::Surv(imputed_value,censored)~GROUP,
                  data=dataset,dist="lognormal")

aft.imputation [["loglogistic"]]  <- survival::survreg(survival::Surv(imputed_value,censored)~GROUP,
                  data=dataset,dist="loglogistic")

n <- nrow(imputation_data_edit)
nu0 <- 3               ## number of parameters
loglik <- sapply(aft.imputation, "[[", "loglik")[2,]    ## Log-likelihoods
AIC <- -2 * loglik + 2 * nu0
BIC <- -2 * loglik + log(n) * nu0
ModelFit.aft <- data.frame(LogLik = loglik, AIC = AIC, BIC = BIC)
return(list(ModelFit.aft,aft.imputation))
}

#Midpoint

#imputation data needs to be adapted to fit AFT model, censored from 0.1 days instead of 0 days
imputation_data_edit.m <- imputation_data |>
  dplyr::mutate(imputed_value=ifelse(L==0 & is.na(R)==T,0.1,midpoint))

AFT.mid <- AFT.fit.func(imputation_data_edit.m)
print(round(AFT.mid[[1]], 1))
#lognormal model best
AFT.mid.fit <- AFT.mid[[2]][["lognormal"]]
summary(AFT.mid.fit)
#95% of exp of regression parameters
exp(confint(AFT.mid.fit, level = 0.95))

#Leftpoint
imputation_data_edit.l <- imputation_data_edit |>
  dplyr::mutate(imputed_value=ifelse(L==0,0.1,leftpoint))

AFT.left <- AFT.fit.func(imputation_data_edit.l)
print(round(AFT.left[[1]], 1))
#Weibull model best
AFT.left.fit <- AFT.left[[2]][["weibull"]]
summary(AFT.left.fit)
#95% of exp of regression parameters
exp(confint(AFT.left.fit, level = 0.95))


#Rightpoint
imputation_data_edit.r <- imputation_data_edit |>
  dplyr::mutate(imputed_value=ifelse(L==0 & is.na(R)==T,0.1,rightpoint))

AFT.right <- AFT.fit.func(imputation_data_edit.r)
print(round(AFT.right[[1]], 1))
#lognormal model best
AFT.right.fit <- AFT.right[[2]][["lognormal"]]
summary(AFT.right.fit)
#95% of exp of regression parameters
exp(confint(AFT.right.fit, level = 0.95))

```

### Adjusted model

```{r}
AFT.fit.adjust.func <- function(dataset){
  aft.imputation <- list()

aft.imputation [["weibull"]] <- survival::survreg(survival::Surv(imputed_value,censored)~GROUP+decelltype_std,
                  data=dataset,dist="weibull")

aft.imputation [["lognormal"]]  <- survival::survreg(survival::Surv(imputed_value,censored)~GROUP+decelltype_std,
                  data=dataset,dist="lognormal")

aft.imputation [["loglogistic"]]  <- survival::survreg(survival::Surv(imputed_value,censored)~GROUP+decelltype_std,
                  data=dataset,dist="loglogistic")

n <- nrow(imputation_data_edit)
nu0 <- 3               ## number of parameters
loglik <- sapply(aft.imputation, "[[", "loglik")[2,]    ## Log-likelihoods
AIC <- -2 * loglik + 2 * nu0
BIC <- -2 * loglik + log(n) * nu0
ModelFit.aft <- data.frame(LogLik = loglik, AIC = AIC, BIC = BIC)
return(list(ModelFit.aft,aft.imputation))
}


AFT.mid.adjust <- AFT.fit.adjust.func(imputation_data_edit.m)
print(round(AFT.mid[[1]], 1))
#lognormal model best
AFT.mid.adjust.fit <- AFT.mid.adjust[[2]][["lognormal"]]
summary(AFT.mid.adjust.fit)

#Leftpoint
AFT.left.adjust <- AFT.fit.adjust.func(imputation_data_edit.l)
print(round(AFT.left.adjust[[1]], 1))
#Weibull model best
AFT.left.adjust.fit <- AFT.left.adjust[[2]][["weibull"]]
summary(AFT.left.adjust.fit)


#Rightpoint
AFT.right.adjust <- AFT.fit.adjust.func(imputation_data_edit.r)
print(round(AFT.right.adjust[[1]], 1))
#lognormal model best
AFT.right.adjust.fit <- AFT.right.adjust[[2]][["lognormal"]]
summary(AFT.right.adjust.fit)
```

### Unadjusted plots

#### Midpoint

```{r}
#extracting regression parameters
imp.aft.inter.mid <- AFT.mid.fit$coefficients[[1]]
imp.aft.nivo.mid <- AFT.mid.fit$coefficients[[2]]
imp.aft.scale.mid <- AFT.mid.fit$scale
imp.aft.shape.mid <- 1/imp.aft.scale

#creating plot
Cairo::Cairo(
  width=44,
  height=30,
  file="CONFIRM_mid_AFT.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(S.midpoint, col=c("black","black"), xlim=c(0, 800),ylim=c(0,1),
     xlab ="Time since randomisation (days)",
     ylab ="Progression-free survival probability",
     lty=c(2,1),
     cex.lab=1.8,
     cex.axis=2)
curve(plnorm(x,meanlog=imp.aft.inter.mid,sdlog=imp.aft.scale.mid,lower.tail=FALSE),
                      from=0,to=800,add=TRUE,col="red")
curve(plnorm(x,meanlog=imp.aft.inter.mid+imp.aft.nivo.mid,sdlog=imp.aft.scale.mid,lower.tail=FALSE),
                      from=0,to=800,add=TRUE,col="blue")
legend("topright",lty = c(1,2,1,1),
       col = c("black","black","blue","red"),
       legend=c("KM Nivolumab","KM Placebo","AFT Nivolumab","AFT Placebo"),
       box.lty=0,
       cex=2)
dev.off()
```

#### Rightpoint

```{r}
#extracting regression parameters
imp.aft.inter.right <- AFT.right.fit$coefficients[[1]]
imp.aft.nivo.right <- AFT.right.fit$coefficients[[2]]
imp.aft.scale.right <- AFT.right.fit$scale
imp.aft.shape.right <- 1/imp.aft.scale

#creating plot
Cairo::Cairo(
  width=44,
  height=30,
  file="CONFIRM_right_AFT.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(S.rightpoint, col=c("black","black"), xlim=c(0, 800),ylim=c(0,1),
     xlab ="Time since randomisation (days)",
     ylab ="Progression-free survival probability",
     lty=c(2,1),
     cex.lab=1.8,
     cex.axis=2)
curve(plnorm(x,meanlog=imp.aft.inter.right,sdlog=imp.aft.scale.right,lower.tail=FALSE),
                      from=0,to=800,add=TRUE,col="red")
curve(plnorm(x,meanlog=imp.aft.inter.right+imp.aft.nivo.right,sdlog=imp.aft.scale.right,lower.tail=FALSE),
                      from=0,to=800,add=TRUE,col="blue")
legend("topright",lty = c(1,2,1,1),
       col = c("black","black","blue","red"),
       legend=c("KM Nivolumab","KM Placebo","AFT Nivolumab","AFT Placebo"),
       box.lty=0,
       cex=2)
dev.off()
```

#### Leftpoint

```{r}
#extracting regression parameters
imp.aft.inter <- AFT.left.fit$coefficients[[1]]
imp.aft.nivo <- AFT.left.fit$coefficients[[2]]
imp.aft.scale <- AFT.left.fit$scale
imp.aft.shape <- 1/imp.aft.scale

#creating plot

```

# Interval censored methods

## NPMLE

```{r}
NPMLE.CONFIRM <- interval::icfit(survival::Surv(L,R,type="interval2")~GROUP,data=interval_data_all,conf.int=T)

#extracting CI estimates
nivo.CI <- NPMLE.CONFIRM$CI[[1]]
pbo.CI <- NPMLE.CONFIRM$CI[[2]]

#Rough estimates of the median added (will want to check this with people)
#figuring out CI for median survival
pbo.median.CI <- data.frame("Time"=pbo.CI$time,"lower"=pbo.CI$lower,"upper"=pbo.CI$upper) #row 6 for lower, row 17 for upper
nivo.median.CI <- data.frame("Time"=nivo.CI$time,"lower"=nivo.CI$lower,"upper"=nivo.CI$upper) #row 12 for lower, row 26 for upper
#median survival = 49-50 pbo (37, 132)
# nivo 104-117 (75,168)


Cairo::Cairo(
  width=48,
  height=30,
  file="CONFIRM_NPMLE.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(NPMLE.CONFIRM,conf.int = F,LEGEND = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability",
     cex.lab=1.8,
     cex.axis=2)
polygon(x=c(nivo.CI$time,rev(nivo.CI$time)),
        y=c(nivo.CI$lower,rev(nivo.CI$upper)),
        col =  adjustcolor("dodgerblue", alpha.f = 0.10), border = NA)
polygon(x=c(pbo.CI$time,rev(pbo.CI$time)),
        y=c(pbo.CI$lower,rev(pbo.CI$upper)),
        col =  adjustcolor("orangered", alpha.f = 0.10), border = NA)
legend("topright",legend=c("Nivolumab","Placebo"),
       lty = c(1,2),box.lty=0,col=c("black","black"),
       fill=c(adjustcolor("dodgerblue", alpha.f = 0.2),adjustcolor("orangered", alpha.f = 0.2)),cex=2)
# text(x=525,y=0.78, "Nivolumab group median 104-117 days* (95% CI 75-168)\nPlacebo group median 49-50 days* (95% CI 37-132)\nUnivariate**: p=0.0054",cex=0.8,pos=4)
dev.off()
```

### Risk tables

```{r}
#split groups 
interval_nivo <- interval_data_all |>
  dplyr::filter(GROUP=="Nivolumab")
interval_pbo <- interval_data_all |>
  dplyr::filter(GROUP=="Placebo")

#Creating risk table
interval_pbo_risk <- interval_pbo |>
  dplyr::mutate(risk_grp_3mth = ifelse(L<=365/4 & is.na(R)==T,"RC",ifelse(L<365/4 & R>365/4,"IC",ifelse(L>365/4,"At risk","Event"))),
                risk_grp_6mth = ifelse(L<=365/2 & is.na(R)==T,"RC",ifelse(L<365/2 & R>365/2,"IC",ifelse(L>365/2,"At risk","Event"))),
                risk_grp_9mth = ifelse(L<=365*3/4 & is.na(R)==T,"RC",ifelse(L<365*3/4 & R>365*3/4,"IC",ifelse(L>365*3/4,"At risk","Event"))),
                risk_grp_12mth = ifelse(L<=365 & is.na(R)==T,"RC",ifelse(L<365 & R>365,"IC",ifelse(L>365,"At risk","Event"))),
                risk_grp_0_mth = ifelse(L==0 & is.na(R)==T,"RC",ifelse(L==0 & R>0,"IC",ifelse(L>0,"At risk","Event"))))

table(interval_pbo_risk$risk_grp_3mth)
table(interval_pbo_risk$risk_grp_6mth)
table(interval_pbo_risk$risk_grp_9mth)
table(interval_pbo_risk$risk_grp_12mth)
table(interval_pbo_risk$risk_grp_0_mth)

prop.table(table(interval_pbo_risk$risk_grp_0_mth))
prop.table(table(interval_pbo_risk$risk_grp_3mth))
prop.table(table(interval_pbo_risk$risk_grp_6mth))
prop.table(table(interval_pbo_risk$risk_grp_9mth))
prop.table(table(interval_pbo_risk$risk_grp_12mth))


#repeating for Nivo group
interval_nivo_risk <- interval_nivo |>
  dplyr::mutate(risk_grp_3mth = ifelse(L<=365/4 & is.na(R)==T,"RC",ifelse(L<365/4 & R>365/4,"IC",ifelse(L>365/4,"At risk","Event"))),
                risk_grp_6mth = ifelse(L<=365/2 & is.na(R)==T,"RC",ifelse(L<365/2 & R>365/2,"IC",ifelse(L>365/2,"At risk","Event"))),
                risk_grp_9mth = ifelse(L<=365*3/4 & is.na(R)==T,"RC",ifelse(L<365*3/4 & R>365*3/4,"IC",ifelse(L>365*3/4,"At risk","Event"))),
                risk_grp_12mth = ifelse(L<=365 & is.na(R)==T,"RC",ifelse(L<365 & R>365,"IC",ifelse(L>365,"At risk","Event"))),
                risk_grp_0_mth = ifelse(L==0 & is.na(R)==T,"RC",ifelse(L==0 & R>0,"IC",ifelse(L>0,"At risk","Event"))))

table(interval_nivo_risk$risk_grp_3mth)
table(interval_nivo_risk$risk_grp_6mth)
table(interval_nivo_risk$risk_grp_9mth)
table(interval_nivo_risk$risk_grp_12mth)
table(interval_nivo_risk$risk_grp_0_mth)

prop.table(table(interval_nivo_risk$risk_grp_0_mth))
prop.table(table(interval_nivo_risk$risk_grp_3mth))
prop.table(table(interval_nivo_risk$risk_grp_6mth))
prop.table(table(interval_nivo_risk$risk_grp_9mth))
prop.table(table(interval_nivo_risk$risk_grp_12mth))
```

### Imputing median

```{r}
#Finding undeterminate area the median is within

#Nivolumab
NPMLE.nivo <- unlist(NPMLE.CONFIRM$pf)[1:12]
cumsum(unname(NPMLE.nivo))<0.5 #between 3 and 4th Turnbull interval
names(NPMLE.nivo)[3]
names(NPMLE.nivo)[4] 
#median is (104, 117]

plot(NPMLE.CONFIRM)
abline(h=0.5)
abline(v=104)
abline(v=117)

#Placebo
NPMLE.pbo <- unlist(NPMLE.CONFIRM$pf)[13:20]
(1-cumsum(unname(NPMLE.pbo)))<0.5 #between 2 and 3rd Turnbull interval
names(NPMLE.pbo)[2]
names(NPMLE.pbo)[3] 

plot(NPMLE.CONFIRM)
abline(h=0.5)
abline(v=49)
abline(v=50)

#Imputing

#Nivolumab
#104 -117 day (13 day window)
(117+104)/2 #linear is 110.5 days
104+log(2)*(117-104)/2 #using mean*In(2)=median time = 108.5

#Placebo 49-50 days
(49+50)/2 #linear is 49.5 days
49+log(2)*(50-49)/2 # exponential is 49.3
```

## Statistical test

### Sun's scores (1996)

```{r}
#Sun scores 1996
interval_edit <- interval_data_all |>
  dplyr::mutate(right = ifelse(L==0 & is.na(R)==T,9999,R),
                left= ifelse(L==0,NA,L))
interval::ictest(survival::Surv(L,R,type="interval2")~GROUP,
                 scores="logrank1",data=interval_edit,
                  method="pclt", 
       icontrol=icfitControl(maxit=100000))
```

### FH tests

```{r}
#FHtest requires edited version
interval_edit <- interval_data_all |>
  dplyr::mutate(right = ifelse(L==0 & is.na(R)==T,9999,R),
                left= ifelse(L==0,NA,L))

#Checking the form of the survival objects produced by the two different ways (the approx and the actual that are for real purposes the same)
with(Surv(left,right,type="interval2"),data=interval_edit)
with(Surv(L,R,type="interval2"),data=interval_edit)



#All FHtest here use version based on the permutation distribution
library(FHtest)

#log-rank
confirm.logtest <- FHtest::FHtesticp(Surv(left,right,type="interval2")~GROUP,
                  rho=0,lambda=0,data=interval_edit,
                  icontrol=icfitControl(maxit=100000))

#early 
confirm.test.early <- FHtest::FHtesticp(Surv(left,right,type="interval2")~GROUP,
                  rho=1,lambda=0,data=interval_edit,
                  icontrol=icfitControl(maxit=100000))

#middle
confirm.test.mid <- FHtest::FHtesticp(Surv(left,right,type="interval2")~GROUP,
                  rho=1,lambda=1,data=interval_edit,
                  icontrol=icfitControl(maxit=100000))

#late
confirm.test.late <- FHtest::FHtesticp(Surv(left,right,type="interval2")~GROUP,
                  rho=0,lambda=1,data=interval_edit,
                  icontrol=icfitControl(maxit=100000))
```

### Extra tests

```{r}
#Finkelstein 1986 grouped proportional hazards test
interval::ictest(survival::Surv(left,right,type="interval2")~GROUP,
                 scores="logrank2",data=interval_edit,
                  method="pclt", 
       icontrol=icfitControl(maxit=100000))

#Also performing wilcoxon- mann-whitnwy score test in interval package to compare outputs (as allows proper form of surv object)
interval::ictest(survival::Surv(left,right,type="interval2")~GROUP,
                 scores="wmw",data=interval_edit,
                  method="pclt", 
       icontrol=icfitControl(maxit=100000))
```

## PH models

### Parametric

```{r}
#Starting with assuming parametric form of baseline survival
confirm.para.cox <- list()

confirm.para.cox[["weibull"]] <-icenReg::ic_par(Surv(L,R,type="interval2")~GROUP,
                                     data=interval_edit,model="ph",dist="weibull")
confirm.para.cox[["lognormal"]] <- icenReg::ic_par(Surv(L,R,type="interval2")~GROUP,
                                     data=interval_edit,model="ph",dist="lnorm")
confirm.para.cox[["loglogistic"]] <- icenReg::ic_par(Surv(L,R,type="interval2")~GROUP,
                                     data=interval_edit,model="ph",dist="loglogistic")
confirm.para.cox[["gamma"]] <- icenReg::ic_par(Surv(L,R,type="interval2")~GROUP,
                                     data=interval_edit,model="ph",dist="gamma")

n <- nrow(interval_edit)
nu0 <- 3               ## number of parameters
loglik <- sapply(confirm.para.cox, "[[", "llk")    ## Log-likelihoods
AIC <- -2 * loglik + 2 * nu0
BIC <- -2 * loglik + log(n) * nu0
ModelFit.para.cox <- data.frame(LogLik = loglik, AIC = AIC, BIC = BIC)
print(round(ModelFit.para.cox, 1))
#Log normal is best fit (is also best fit when add epitheliod cell factor)

confirm.paraCox <- confirm.para.cox[["lognormal"]]
summary(confirm.paraCox)

#extracting regression coef
mu <- 4.4760
std <- 1.326
beta_pbo <- 0.4386
#creating survival curves
t <- seq(from=0,to=800,by=0.1)
S_t.nivo <- 1-pnorm((log(t)-mu)/std)
S_t.pbo <- (1-pnorm((log(t)-mu)/std))^exp(0.4386)


png("CONFIRM_para_PH_unadjust.png")
plot(NPMLE.CONFIRM,conf.int = F,LEGEND = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability")
lines(y=S_t.nivo,x=t,col="blue")
lines(y=S_t.pbo,x=t,col="red")
legend("topright",lty = c(1,2,1,1),
       col = c("black","black","blue","red"),
       legend=c("NPMLE Nivolumab","NPMLE Placebo","PH Nivolumab","PH Placebo"),
       box.lty=0)
dev.off()

#adding in epitheliod cell factor
confirm.para.cox.epi <- icenReg::ic_par(Surv(L,R,type="interval2")~GROUP+decelltype_std,
                                     data=interval_edit,model="ph",dist="lnorm")
summary(confirm.para.cox.epi)

#Calculating 95% CI
exp(confint(confirm.paraCox, level = 0.95))
exp(confint(confirm.para.cox.epi, level = 0.95))
```

### Semi-parametric model

```{r}
CONFIRM.sp.PH <- icenReg::ic_sp(Surv(L,R,type="interval2")~GROUP,
                               data=interval_edit,model="ph",
                               bs_samples = 1000)
summary(CONFIRM.sp.PH)

spPH_data <- data.frame(GROUP = c("Nivolumab","Placebo"))
rownames(spPH_data) <- c("Nivolumab","Placebo")

png("CONFIRM SP PH plot.png")
plot(NPMLE.CONFIRM,conf.int = F,LEGEND = F,
     XLAB = "Time since randomisation (days)",
     YLAB= "Progression-free survival probability",
     )
lines(CONFIRM.sp.PH, spPH_data,
      col=c("blue","red"))
legend("topright",legend=c("NPMLE Nivolumab","NPMLE Placebo", "SP PH Nivolumab", "SP PH Placebo"),
       lty = c(1,2,1,1),box.lty=0,col=c("black","black","blue","red"))
dev.off()

#Adding epitheliod cell type
CONFIRM.sp.PH.epi <- icenReg::ic_sp(Surv(L,R,type="interval2")~GROUP+decelltype_std,
                               data=interval_edit,model="ph",
                               bs_samples = 1000)
summary(CONFIRM.sp.PH.epi) #not significant

#calculating confidence intervals
exp(confint(CONFIRM.sp.PH, level = 0.95))
exp(confint(CONFIRM.sp.PH.epi, level = 0.95))

#predicting median survival time for each treatment group
predict(CONFIRM.sp.PH,type="response",
        newdata=spPH_data)
```

### Proportional hazards assumption graphical check

```{r}
png("CONFIRM_PH_check.png")
icenReg::diag_covar(CONFIRM.sp.PH)
dev.off()
```

## AFT models

### Unadjusted

```{r}
#Fitting the AFT models (non adjusted)
aft.fit <- list()
aft.fit[["loglogistic"]] <- survreg(Surv(left,right,type="interval2")~GROUP,
        data = interval_edit , dist = "loglogistic")
aft.fit[["lognormal"]] <- survreg(Surv(left,right,type="interval2")~GROUP,
        data = interval_edit , dist = "lognormal")
aft.fit[["weibull"]] <- survreg(Surv(left,right,type="interval2")~GROUP,
        data = interval_edit , dist = "weibull")

#now need to compare fits using AIC/BIC

n <- nrow(interval_edit)
nu0 <- 3               ## number of parameters
loglik <- sapply(aft.fit, "[[", "loglik")[2,]    ## Log-likelihoods
AIC <- -2 * loglik + 2 * nu0
BIC <- -2 * loglik + log(n) * nu0
ModelFit.aft <- data.frame(LogLik = loglik, AIC = AIC, BIC = BIC)
print(round(ModelFit.aft, 1))

#loglogistic barely is the best
aft.confirm <- aft.fit[["loglogistic"]]
summary(aft.confirm)


#extracting info
intercept.aft <- aft.confirm$coefficients[[1]] 
nivo.aft <- aft.confirm$coefficients[[2]]
scale.aft <- aft.confirm$scale
shape.aft <- 1/scale.aft

#creating survival functions to plot S_t
aft_pbo_S <- 1/(1+(t*exp(-intercept.aft))^shape.aft)
aft_nivo_S <- 1/(1+(t*exp(-intercept.aft-nivo.aft))^shape.aft)

png("AFT_confirm_unadjust.png")
plot(NPMLE.CONFIRM,conf.int=F, LEGEND = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability")
lines(x=t,y=aft_nivo_S,lty=1,col="blue")
lines(x=t,y=aft_pbo_S,lty=1,col="red")
legend("topright",lty = c(1,2,1,1),
       col = c("black","black","blue","red"),
       legend=c("NPMLE Nivolumab","NPMLE Placebo","AFT Nivolumab","AFT Placebo"),
       box.lty=0)
dev.off()

#confidence interval and exp of confidence interval
confint(aft.confirm, level = 0.95)
exp(confint(aft.confirm, level = 0.95))
```

### Adjusted model

```{r}
#Repeating for adjusted model:)
#loglogistic model is once again the best (by .3 in AIC and .4 in BIC vs lognormal)
aft.adjust.confirm <- survreg(Surv(left,right,type="interval2")~GROUP+decelltype_std,
        data = interval_edit , dist = "loglogistic")
summary(aft.adjust.confirm)

#confidence interval and exp of confidence interval
confint(aft.adjust.confirm, level = 0.95)
exp(confint(aft.adjust.confirm, level = 0.95))
```

# Comparison of imputation to interval-cenosred approach

Plots containing both interval-censored and imputation estimates allowing for differences between the two to be examined

## NPMLE plot

### Simple plots

```{r}
#mid point KM vs IC NPMLE
Cairo::Cairo(
  width=48,
  height=30,
  file="NPMLE vs midpoint KM.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(NPMLE.CONFIRM,xlim=c(0, 800),LEGEND = F,conf.int = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability",
     cex.lab=1.8,
     cex.axis=2)
par(new=T)
plot(S.midpoint, col=c("blue","red"), xlim=c(0, 800),
     cex.lab=1.8,
     cex.axis=2)
legend("topright",lty = c(1,2,1,1),
       col = c("black","black","blue","red"),
       legend=c("NPMLE Nivolumab","NPMLE Placebo","KM Nivolumab","KM Placebo"),
       box.lty=0,
       cex=2)
dev.off()


#right point KM vs IC NPMLE
Cairo::Cairo(
  width=48,
  height=30,
  file="NPMLE vs rightpoint KM.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(NPMLE.CONFIRM,xlim=c(0, 800),LEGEND = F,conf.int = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability",
     cex.lab=1.8,
     cex.axis=2)
par(new=T)
plot(S.rightpoint, col=c("blue","red"), xlim=c(0, 800),
     cex.lab=1.8,
     cex.axis=2)
legend("topright",lty = c(1,2,1,1),
       col = c("black","black","blue","red"),
       legend=c("NPMLE Nivolumab","NPMLE Placebo","KM Nivolumab","KM Placebo"),
       box.lty=0,
       cex=2)
dev.off()
```

### Split of treatment cohorts

```{r}
imputation_data.nivo <- imputation_data |>
  dplyr::filter(GROUP=="Nivolumab")
imputation_data.pbo <- imputation_data |>
  dplyr::filter(GROUP=="Placebo")

#Nivolumab group plot
NPMLE.nivo <- interval::icfit(survival::Surv(L,R,type="interval2")~1,data=interval_nivo,conf.int=F)
S.midpoint.nivo <- survfit(Surv(midpoint,censored,type="right") ~ 1, data = imputation_data.nivo,se.fit=F)
S.leftpoint.nivo <- survfit(Surv(leftpoint,censored,type="right") ~ 1, data = imputation_data.nivo,se.fit=F)
S.rightpoint.nivo <- survfit(Surv(rightpoint,censored,type="right") ~ 1, data = imputation_data.nivo,se.fit=F)

library(Cairo)
Cairo::Cairo(
  width=48,
  height=30,
  file="NPMLE vs all imputations nivo.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(NPMLE.nivo,xlim=c(0, 800),LEGEND = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability")
par(new=T)
plot(S.midpoint.nivo, col=c("blue"), xlim=c(0, 800),ylim=c(0,1))
par(new=T)
plot(S.leftpoint.nivo, col=c("dodgerblue"),lty=c(2),xlim=c(0, 800),ylim=c(0,1))
par(new=T)
plot(S.rightpoint.nivo, col=c("darkblue"),lty=c(9), xlim=c(0, 800),ylim=c(0,1))
legend("topright",lty = c(1,1,2,9),
       col = c("black","blue","dodgerblue","darkblue"),
       legend=c("NPMLE Nivolumab","KM Nivolumab midpoint","KM Nivolumab leftpoint","KM Nivolumab rightpoint"),
       cex=2)
dev.off()


NPMLE.pbo <- interval::icfit(survival::Surv(L,R,type="interval2")~1,data=interval_pbo,conf.int=F)
S.midpoint.pbo <- survfit(Surv(midpoint,censored,type="right") ~ 1, data = imputation_data.pbo,se.fit=F)
S.leftpoint.pbo <- survfit(Surv(leftpoint,censored,type="right") ~ 1, data = imputation_data.pbo,se.fit=F)
S.rightpoint.pbo <- survfit(Surv(rightpoint,censored,type="right") ~ 1, data = imputation_data.pbo,se.fit=F)

Cairo::Cairo(
  width=48,
  height=30,
  file="NPMLE vs all imputations pbo.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(NPMLE.pbo,xlim=c(0, 800),LEGEND = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability")
par(new=T)
plot(S.midpoint.pbo, col=c("red"), xlim=c(0, 800),ylim=c(0,1))
par(new=T)
plot(S.leftpoint.pbo, col=c("orange"),lty=c(2,2),xlim=c(0, 800),ylim=c(0,1))
par(new=T)
plot(S.rightpoint.pbo, col=c("orangered"),lty=c(9,9), xlim=c(0, 800),ylim=c(0,1))
legend("topright",lty = c(1,1,2,9),
       col = c("black","red","orange","orangered"),
       legend=c("NPMLE Placebo","KM Placebo midpoint","KM Placebo leftpoint","KM Placebo rightpoint"),
       cex=2)
dev.off()


```

## PH plot

### Midpoint

```{r}
Cairo::Cairo(
  width=48,
  height=30,
  file="midpoint Cox vs PH IC methods.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(NPMLE.CONFIRM,xlim=c(0,800),
     conf.int = F,
     LEGEND = F,
     XLAB = "Time since randomisation (days)",
     YLAB="Progression-free survival probability",
     cex.lab=1.8,
     cex.axis=2)
par(new=T)
plot(fit.mid,col=c("blue","red"),xlim=c(0,800),
     cex.lab=1.8,
     cex.axis=2)
lines(CONFIRM.sp.PH, spPH_data,col=c("dodgerblue","orange"),xlim=c(0,800))
legend("topright",lty = c(1,2,1,1,1,1),
       col = c("black","black","blue","red","dodgerblue","orange"),
       legend=c("NPMLE Nivolumab","NPMLE Placebo","Mid-point Cox Nivolumab","Mid-point Cox Placebo","IC PH SP Nivolumab","IC PH SP Placebo"),
       box.lty=0,
       cex=2)
dev.off()
```

### rightpoint

```{r}
Cairo::Cairo(
  width=48,
  height=30,
  file="rightpoint Cox vs PH IC methods.png",
  type="png",
  bg = "white",
  canvas="white",
  dpi=100,
  units="cm"
)
plot(NPMLE.CONFIRM,xlim=c(0,800),
     conf.int = F,
     LEGEND = F,
     XLAB = "Time since randomisation (days)",
     YLAB="Progression-free survival probability",
     cex.lab=1.8,
     cex.axis=2)
par(new=T)
plot(fit.right,col=c("blue","red"),xlim=c(0,800),
     cex.lab=1.8,
     cex.axis=2)
lines(CONFIRM.sp.PH, spPH_data,col=c("dodgerblue","orange"),xlim=c(0,800))
legend("topright",lty = c(1,2,1,1,1,1),
       col = c("black","black","blue","red","dodgerblue","orange"),
       legend=c("NPMLE Nivolumab","NPMLE Placebo","Right-point Cox Nivolumab","Right-point Cox Placebo","IC PH SP Nivolumab","IC PH SP Placebo"),
       box.lty=0,
       cex=2)
dev.off()
```

## AFT plot

### Midpoint

```{r}
png("AFT_imp_mid_vs_IC.png")
plot(NPMLE.CONFIRM,LEGEND = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability",
     conf.int = F)
curve(plnorm(x,meanlog=imp.aft.inter.mid,sdlog=imp.aft.scale.mid,lower.tail=FALSE),
                      from=0,to=800,add=TRUE,col="red")
curve(plnorm(x,meanlog=imp.aft.inter.mid+imp.aft.nivo.mid,sdlog=imp.aft.scale.mid,lower.tail=FALSE),
                      from=0,to=800,add=TRUE,col="blue")
lines(x=t,y=aft_nivo_S,lty=1,col="dodgerblue")
lines(x=t,y=aft_pbo_S,lty=1,col="orange")
legend("topright",lty = c(1,2,1,1,1,1),
       col = c("black","black","blue","red","dodgerblue","orange"),
       legend=c("NPMLE Nivolumab","NPMLE Placebo","Mid-point AFT Nivolumab","Mid-point AFT Placebo","IC AFT Nivolumab","IC AFT Placebo"),
       box.lty=0)
dev.off()
```

### Rightpoint

```{r}
png("AFT_imp_right_vs_IC.png")
plot(NPMLE.CONFIRM,LEGEND = F,
     XLAB="Time since randomisation (days)",
     YLAB="Progression-free survival probability",
     conf.int = F)
curve(plnorm(x,meanlog=imp.aft.inter.right,sdlog=imp.aft.scale.right,lower.tail=FALSE),
                      from=0,to=800,add=TRUE,col="red")
curve(plnorm(x,meanlog=imp.aft.inter.right+imp.aft.nivo.right,sdlog=imp.aft.scale.right,lower.tail=FALSE),
                      from=0,to=800,add=TRUE,col="blue")
lines(x=t,y=aft_nivo_S,lty=1,col="dodgerblue")
lines(x=t,y=aft_pbo_S,lty=1,col="orange")
legend("topright",lty = c(1,2,1,1,1,1),
       col = c("black","black","blue","red","dodgerblue","orange"),
       legend=c("NPMLE Nivolumab","NPMLE Placebo","Right-point AFT Nivolumab","Right-point AFT Placebo","IC AFT Nivolumab","IC AFT Placebo"),
       box.lty=0)
dev.off()
```
